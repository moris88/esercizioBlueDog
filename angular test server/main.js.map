{"version":3,"sources":["./src/environments/environment.ts","./src/app/api-rest.service.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;ACT5D,MAAM,cAAc;IAKzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAH5B,WAAM,GAAG,2CAA2C,CAAC;QACrD,gBAAW,GAAG,6CAA6C,CAAC;IAE5B,CAAC;IAElC,GAAG,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;;4EATU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;;;;;;;;;;;;;;;;;;;;;;;;ICqClB,sEAA2B;IACzB,oEAAG;IAAA,oEAAG;IAAA,iEAAM;IAAA,4DAAI;IAAA,4DAAI;IACpB,uDACF;;IAAA,4DAAM;;;IADJ,0DACF;IADE,0JACF;;ACpCK,MAAM,YAAY;IAMvB,YAAoB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QAL3C,UAAK,GAAG,OAAO,CAAC;QAGhB,SAAI,GAAG,KAAK,CAAC;IAEiC,CAAC;IAE/C,EAAE;QACA,IAAG,IAAI,CAAC,UAAU,EAAE,KAAK,IAAI,EAAC;YAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAClC,CAAC,QAAa,EAAE,EAAE;gBAChB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;gBACvB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM;YAC/B,CAAC,CACF,CAAC;SACH;aAAI;YACH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,MAAM,GAAG,cAAc;SAC7B;IAEH,CAAC;IAED,UAAU;QACR,IAAI,KAAK,GAAG,iGAAiG,CAAC;QAC9G,IAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;;YAClC,OAAO,IAAI,CAAC;IACnB,CAAC;;wEA5BU,YAAY;4FAAZ,YAAY;QDRzB,yEAAuB;QACrB,wEAAwB;QAAA,wEAAa;QAAA,4DAAK;QAC1C,oEAAG;QACD,kOAAsK;QAAA,gEAAI;QAC1K,gNAAoJ;QAAA,gEAAI;QAC1J,4DAAI;QACJ,oEAAG;QAAA,iEAAM;QAAA,4DAAI;QACb,sEAAI;QACF,sEAAI;QAAA,gFAAoB;QAAA,4DAAK;QAC7B,sEAAI;QAAA,+EAAmB;QAAA,4DAAK;QAC5B,sEAAI;QAAA,gFAAoB;QAAA,4DAAK;QAC/B,4DAAK;QACL,qEAAG;QAAA,oEAAQ;QAAA,4DAAI;QACf,sEAAI;QACF,sEAAI;QAAA,4FAAgC;QAAA,4DAAK;QAC3C,4DAAK;QACL,qEAAG;QAAA,uEAAW;QAAA,4DAAI;QAClB,sEAAI;QACF,sEAAI;QAAA,2EAAe;QAAA,4DAAK;QACxB,sEAAI;QAAA,uFAA2B;QAAA,4DAAK;QACtC,4DAAK;QACL,qEAAG;QAAA,iEAAK;QAAA,4DAAI;QACZ,sEAAI;QACF,sEAAI;QAAA,oFAAwB;QAAA,4DAAK;QACnC,4DAAK;QACL,iEAAI;QACJ,0EAAiB;QACf,yEAAwB;QAAA,yFAA6B;QAAA,4DAAK;QAC1D,qEAAG;QACD,yIAA4E;QAAA,iEAAI;QAChF,4IAA+E;QAAA,iEAAI;QACnF,gJAAmF;QAAA,iEAAI;QACvF,+IAAkF;QAAA,iEAAI;QACtF,wJAA2F;QAAA,iEAAI;QALjG,4DAAG;QAML,4DAAM;QACN,0EAAiB;QACf,0EAA8B;QAC5B,4EAAqJ;QAA9I,8KAAiB;QAAxB,4DAAqJ;QACrJ,6EAA0F;QAAf,qIAAS,QAAI,IAAC;QAAC,8DAAE;QAAA,4DAAS;QACvG,4DAAM;QACR,4DAAM;QACN,0GAGM;QACR,4DAAM;;QARO,2DAAiB;QAAjB,4EAAiB;QAItB,0DAAmB;QAAnB,mFAAmB;;;;;;;;;;;;;;AExC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACF;AACU;AAEV;AACT;;AAgBxC,MAAM,SAAS;;kEAAT,SAAS;wFAAT,SAAS,cAFR,2DAAY;6FADb,EAAE,YAPJ;YACP,uEAAa;YACb,oEAAgB;YAChB,qEAAgB;YAChB,0DAAW;YACX,kEAAmB;SACpB;mIAIU,SAAS,mBAZlB,2DAAY,aAGZ,uEAAa;QACb,oEAAgB;QAChB,qEAAgB;QAChB,0DAAW;QACX,kEAAmB;;;;;;;;;;;;;AChBvB;AAAA;AAAA;AAAA;AAAuD;;;AAEvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;gFAAhB,gBAAgB;+FAAhB,gBAAgB;mGAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;;;;;;;;;;;;;;;;;;;ACPuB;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiRestService {\n\n  private APIurl = 'http://localhost/phpchallenge/api/search/';\n  private APIurlForID = 'http://localhost/phpchallenge/api/searchID/';\n\n  constructor(private http: HttpClient) { }\n\n  public get(url: string): any{\n    return this.http.get(url);\n  }\n}\n","<div class=\"container\">\n  <h1 class=\"text-center\">PHP Challenge</h1>\n  <p>\n    Your task is the creation of a web interface that allows a user to find, given an artist, or a language, or a year, the 3 best selling records matching the criteria. <br>\n    A draft database schema has been designed, you need to fill the missing fields, apply the possible relationships and the first level normalization. <br>\n  </p>\n  <p>ARTIST</p>\n  <ul>\n    <li>first_name (varchar)</li>\n    <li>last_name (varchar)</li>\n    <li>stage_name (varchar)</li>\n  </ul>\n  <p>LANGUAGE</p>\n  <ul>\n    <li>language (varchar) - ISO-8859-15</li>\n  </ul>\n  <p>DISCOGRAPHY</p>\n  <ul>\n    <li>title (varchar)</li>\n    <li>release_datetime (datetime)</li>\n  </ul>\n  <p>SALES</p>\n  <ul>\n    <li>sale_datetime (datetime)</li>\n  </ul>\n  <hr>\n  <div class=\"row\">\n    <h3 class=\"text-center\">My Solution: Tolomeo Maurizio</h3>\n    <p>\n      APIurl 1 = http://localhost/phpchallenge/api/search/ + artist=[name_artist] <br>\n      APIurl 2 = http://localhost/phpchallenge/api/search/ + year=[year_discography] <br>\n      APIurl 3 = http://localhost/phpchallenge/api/search/ + lang=[language_discography] <br>\n      APIurl 4 = http://localhost/phpchallenge/api/search/ + id=[0 for all discography] <br>\n      APIurl 5 = http://localhost/phpchallenge/api/search/ + id=[specific id number discography] <br>\n  </div>\n  <div class=\"row\">\n    <div class=\"input-group mb-3\">\n      <input [(ngModel)]=\"url\" type=\"text\" class=\"form-control\" placeholder=\"Insert URL\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n      <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" (click)=\"go()\">GO</button>\n    </div>\n  </div>\n  <div *ngIf=\"view === true\">\n    <p><b>OUTPUT</b></p>\n    {{ output | json }}\n  </div>\n</div>\n\n\n\n","import { Component } from '@angular/core';\nimport { ApiRestService } from './api-rest.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'prova';\n  url!: string;\n  output!: string;\n  view = false;\n\n  constructor(private apirest: ApiRestService){ }\n\n  go(){\n    if(this.controlURL() === true){\n      this.view = true;\n      this.apirest.get(this.url).subscribe(\n        (response: any) => {\n          this.output = response;\n          console.log(response); //TEST\n        }\n      );\n    }else{\n      this.view = true;\n      this.output = \"URL error!!!\"\n    }\n    \n  }\n\n  controlURL(): boolean{\n    let regex = \"(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[az]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&/=]*)\"; \n    if(this.url.match(regex)) return false;\n    else return true;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}